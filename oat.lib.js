(function () { const css = ` :root { --modal-bg: #272727; --modal-surface: #171717; --modal-ink: #eeeeee; --modal-muted: #9aa8b7; --accent-2: #60a5fa; --danger: #ff6b6b; --glass: rgba(255,255,255,0.02); --border: rgba(255,255,255,0.06); --shadow: 0 10px 30px rgba(2,6,23,0.6); --radius: 12px; --gap: 12px; --transition-speed: 180ms; --z-modal: 99999; --focus-ring: 3px; --input-bg: #373737; } .modal-backdrop { position: fixed; inset: 0; display: none; align-items: flex-start; justify-content: center; background: linear-gradient(180deg, rgba(3,6,12,0.6), rgba(6,8,14,0.7)); z-index: var(--z-modal); padding: 20px; -webkit-tap-highlight-color: transparent; } .modal-backdrop.active { display: flex; } .modal-window { width: 780px; max-width: calc(100% - 40px); background: linear-gradient(180deg, var(--modal-surface), var(--modal-bg)); color: var(--modal-ink); border-radius: var(--radius); box-shadow: var(--shadow); overflow: hidden; display: flex; flex-direction: column; max-height: calc(100vh - 4vh); border: 1px solid var(--border); transform: translateY(-8px); opacity: 0; transition: transform var(--transition-speed) ease, opacity var(--transition-speed) ease; margin-top: 2vh; } .modal-backdrop.active .modal-window { transform: translateY(0); opacity: 1; } .modal-header { padding: 14px 18px; border-bottom: 1px solid rgba(255,255,255,0.03); display: flex; align-items: center; justify-content: space-between; gap: var(--gap); } .modal-title { margin: 0; font-size: 1.05rem; font-weight: 700; color: var(--modal-ink); line-height: 1; } .modal-close { background: transparent; border: none; color: var(--modal-muted); font-size: 18px; padding: 6px; cursor: pointer; border-radius: 8px; } .modal-close:focus { outline: none; box-shadow: 0 0 0 var(--focus-ring) rgba(102,126,234,0.12); } .modal-body { padding: 16px 18px; overflow: auto; display: flex; flex-direction: column; gap: 12px; color: var(--modal-ink); font-size: 14px; } .modal-row { display: flex; gap: 10px; align-items: center; flex-wrap: nowrap; justify-content: center; } .modal-row[data-position="left"] { justify-content: flex-start; } .modal-row[data-position="right"] { justify-content: flex-end; } .modal-row .modal-element { flex: 1 1 auto; min-width: 110px; } .modal-label { display: block; font-size: 13px; color: var(--modal-muted); margin-bottom: 6px; } .modal-message { color: var(--modal-ink); background: transparent; padding: 2px 0; font-size: 14px; } .modal-input, .modal-select, .modal-textarea, .custom-dropdown-trigger { width: 100%; padding: 10px 12px; border-radius: 8px; border: 1px solid var(--border); background: var(--input-bg); color: var(--modal-ink); font-size: 14px; box-sizing: border-box; outline: none; font-family: 'Source Code Pro', monospace; transition: box-shadow var(--transition-speed), transform var(--transition-speed), background var(--transition-speed); } .modal-input::placeholder, .modal-textarea::placeholder { color: rgba(230,238,248,0.32); } .modal-input:focus, .modal-select:focus, .modal-textarea:focus, .custom-dropdown-trigger:focus { box-shadow: 0 0 0 var(--focus-ring) rgba(100,116,255,0.08); border-color: rgba(100,116,255,0.18); transform: translateY(-1px); } .modal-textarea { min-height: 84px; resize: vertical; } .modal-select { -webkit-appearance: none; -moz-appearance: none; appearance: none; background-image: linear-gradient(45deg, transparent 50%, var(--modal-muted) 50%), linear-gradient(135deg, var(--modal-muted) 50%, transparent 50%); background-position: calc(100% - 18px) calc(1em + 2px), calc(100% - 13px) calc(1em + 2px); background-size: 6px 6px, 6px 6px; background-repeat: no-repeat; padding-right: 36px; } .custom-dropdown { position: relative; } .custom-dropdown-portal-menu { position: absolute !important; min-width: 180px; box-shadow: 0 8px 20px rgba(2,6,23,0.6); z-index: 100001 !important; background: var(--modal-surface); border-radius: 8px; border: 1px solid var(--border); max-height: 70vh; overflow: auto; left: 0; top: 0; display: none; } .custom-dropdown-portal-menu.active { display: block; } .custom-dropdown-option { padding: 8px 10px; font-size: 14px; cursor: pointer; color: var(--modal-ink); } .custom-dropdown-option[aria-selected="true"] { background: rgba(96,165,250,0.06); } .custom-dropdown-option:hover { background: rgba(255,255,255,0.02); } .modal-btn, .modal-inline-button, .modal-action { padding: 8px 12px; border-radius: 10px; border: 1px solid transparent; cursor: pointer; font-size: 14px; transition: transform var(--transition-speed), box-shadow var(--transition-speed); } .modal-btn:focus { outline: none; box-shadow: 0 0 0 var(--focus-ring) rgba(99,102,241,0.12); } .modal-btn:hover { transform: translateY(-1px); } .modal-footer { padding: 12px 16px; border-top: 1px solid rgba(255,255,255,0.03); display: flex; gap: 10px; justify-content: flex-end; flex-wrap: wrap; } .hidden { display: none !important; } .small { font-size: 13px; } .center { text-align: center; } .modal-input[type="checkbox"], .modal-input[type="radio"] { appearance: none; width: 16px; height: 16px; border: 2px solid var(--border); background: var(--input-bg); position: relative; border-radius: 4px; display: inline-block; vertical-align: middle; } .modal-input[type="checkbox"]:checked { background: var(--accent-2); } .modal-input[type="checkbox"]:checked::before { content: '\\2713'; position: absolute; top: -2px; left: 1px; color: #000; font-size: 14px; } .modal-input[type="radio"] { border-radius: 50%; } .modal-input[type="radio"]:checked::before { content: ''; position: absolute; top: 3px; left: 3px; width: 8px; height: 8px; background: var(--accent-2); border-radius: 50%; } @media (max-width: 560px) { .modal-window { width: 100%; max-width: 100%; border-radius: 8px; padding: 0; } .modal-body { padding: 12px; } .modal-header { padding: 10px 12px; } .modal-footer { padding: 10px; } } `; if (!document.getElementById('modal-dark-css')) { const s = document.createElement('style'); s.id = 'modal-dark-css'; s.textContent = css; document.head.appendChild(s); } function renderDropdownMenuPortal(trigger, options, callback) { document.querySelectorAll('.custom-dropdown-portal-menu').forEach(e => e.remove()); const menu = document.createElement('div'); menu.className = 'custom-dropdown-portal-menu active'; menu.setAttribute('role', 'listbox'); options.forEach(o => { const opt = document.createElement('div'); opt.className = 'custom-dropdown-option'; opt.tabIndex = 0; opt.dataset.value = (typeof o === 'object' ? o.value : o); opt.textContent = (typeof o === 'object' ? o.label : o); opt.setAttribute('role', 'option'); opt.addEventListener('click', () => { callback(o); menu.remove(); }); opt.addEventListener('keydown', ev => { if (ev.key === 'Enter') { ev.preventDefault(); opt.click(); } }); menu.appendChild(opt); }); document.body.appendChild(menu); const rect = trigger.getBoundingClientRect(); menu.style.width = rect.width + 'px'; let left = rect.left + window.scrollX; const rightEdge = left + rect.width; const viewportWidth = window.innerWidth; if (rightEdge > viewportWidth) { left -= (rightEdge - viewportWidth); } if (left < 0) left = 0; menu.style.left = left + 'px'; menu.style.top = (rect.bottom + window.scrollY) + 'px'; function closeOnOutside(ev) { if (!menu.contains(ev.target) && ev.target !== trigger) { menu.remove(); document.removeEventListener('mousedown', closeOnOutside); } } document.addEventListener('mousedown', closeOnOutside); window.addEventListener('scroll', () => { if (document.body.contains(menu)) { const rect = trigger.getBoundingClientRect(); let leftNew = rect.left + window.scrollX; const rightNewEdge = leftNew + rect.width; if (rightNewEdge > window.innerWidth) leftNew -= (rightNewEdge - window.innerWidth); if (leftNew < 0) leftNew = 0; menu.style.left = leftNew + 'px'; menu.style.top = (rect.bottom + window.scrollY) + 'px'; menu.style.width = rect.width + 'px'; } }, { passive: true }); return menu; } let injected = false, backdrop, dialog, header, titleEl, closeBtn, bodyEl, footerEl; function ensureModal() { if (injected) return; injected = true; backdrop = document.createElement('div'); backdrop.className = 'modal-backdrop'; backdrop.setAttribute('aria-hidden','true'); dialog = document.createElement('div'); dialog.className = 'modal-window'; dialog.setAttribute('role','dialog'); dialog.setAttribute('aria-modal','true'); header = document.createElement('div'); header.className = 'modal-header'; titleEl = document.createElement('h3'); titleEl.className = 'modal-title'; titleEl.id = 'modal_title_' + Math.random().toString(36).slice(2,8); closeBtn = document.createElement('button'); closeBtn.className = 'modal-close'; closeBtn.type = 'button'; closeBtn.setAttribute('aria-label','Close dialog'); closeBtn.innerHTML = '&#x2715;'; bodyEl = document.createElement('div'); bodyEl.className = 'modal-body'; footerEl = document.createElement('div'); footerEl.className = 'modal-footer'; header.appendChild(titleEl); header.appendChild(closeBtn); dialog.appendChild(header); dialog.appendChild(bodyEl); dialog.appendChild(footerEl); backdrop.appendChild(dialog); document.body.appendChild(backdrop); backdrop.addEventListener('click', (e)=>{ if(e.target===backdrop)closeModal(false); }); closeBtn.addEventListener('click',()=>closeModal(false)); } let lastFocused = null; function trapFocus(enable=true){ if(!backdrop)return; if(enable){ lastFocused=document.activeElement; backdrop.addEventListener('keydown',onKeyDown); document.documentElement.style.overflow='hidden'; } else { backdrop.removeEventListener('keydown',onKeyDown); document.documentElement.style.overflow=''; if(lastFocused&&lastFocused.focus)lastFocused.focus(); lastFocused=null; } } function onKeyDown(e){ if(!backdrop.classList.contains('active'))return; if(e.key==='Escape'){e.preventDefault();closeModal(false);return;} if(e.key!=='Tab')return; const focusable=dialog.querySelectorAll('a[href], button:not([disabled]), textarea, input, select, [tabindex]:not([tabindex="-1"])'); if(!focusable.length)return; const first=focusable[0];const last=focusable[focusable.length-1]; if(e.shiftKey&&document.activeElement===first){e.preventDefault();last.focus();} else if(!e.shiftKey&&document.activeElement===last){e.preventDefault();first.focus();} } let resolver=null, openState=null; function sanitizeKey(s){if(!s)return'input';return s.toString().trim().toLowerCase().replace(/[^a-z0-9]+/g,'_').replace(/^_|_$/g,'')||'input';} function createModalElement(type,opts={}){ const out={el:null,input:null}; type=type.toLowerCase(); const wrapper=document.createElement('div');wrapper.className='modal-element'; if(opts.label){const lbl=document.createElement('label');lbl.className='modal-label';lbl.textContent=opts.label;wrapper.appendChild(lbl);} if(type==='message'){const p=document.createElement('div');p.className='modal-message';p.textContent=opts.text||'';out.el=wrapper;wrapper.appendChild(p);return out;} if(type==='input'){ const input=document.createElement('input');input.className='modal-input';input.type=opts.inputType||'text'; if(opts.placeholder)input.placeholder=opts.placeholder; if(opts.key)input.dataset.modalKey=opts.key; if(opts.visibleIf)wrapper.dataset.visibleIf=opts.visibleIf; wrapper.appendChild(input);out.el=wrapper;out.input=input;return out; } if(type==='textarea'){ const ta=document.createElement('textarea'); ta.className='modal-textarea';ta.rows=opts.rows||3; if(opts.placeholder)ta.placeholder=opts.placeholder; if(opts.key)ta.dataset.modalKey=opts.key; if(opts.visibleIf)wrapper.dataset.visibleIf=opts.visibleIf; wrapper.appendChild(ta);out.el=wrapper;out.input=ta;return out; } if(type==='checkbox'||type==='radio'){ const input=document.createElement('input');input.className='modal-input';input.type=type; if(opts.key)input.dataset.modalKey=opts.key; if(opts.visibleIf)wrapper.dataset.visibleIf=opts.visibleIf; wrapper.appendChild(input);out.el=wrapper;out.input=input;return out; } if(type==='select'){ const wrapper2=document.createElement('div');wrapper2.className='custom-dropdown'; const trigger=document.createElement('div');trigger.className='custom-dropdown-trigger modal-input';trigger.tabIndex=0; const options=opts.options||(opts.placeholder?[{label:opts.placeholder,value:''}]:[{label:'Select...',value:''}]); trigger.textContent=options[0].label;trigger.dataset.value=options[0].value; trigger.addEventListener('click',()=>{ renderDropdownMenuPortal(trigger,options,(selected)=>{ trigger.textContent=selected.label; trigger.dataset.value=selected.value; trigger.dispatchEvent(new Event('change')); }); }); if(opts.key)trigger.dataset.modalKey=opts.key; wrapper2.appendChild(trigger); if(opts.visibleIf)wrapper2.dataset.visibleIf=opts.visibleIf; wrapper.appendChild(wrapper2); out.el=wrapper;out.input=trigger;return out; } if(type==='button'){ const btn=document.createElement('button'); btn.type='button';btn.className='modal-inline-button modal-btn'; btn.textContent=opts.value||opts.label||'Button'; if(opts.ariaLabel)btn.setAttribute('aria-label',opts.ariaLabel); const lowerLabel=(opts.value||opts.label||'').toLowerCase(); if(lowerLabel.includes('cancel')||lowerLabel.includes('close')){ btn.style.background='#373737'; btn.style.color='var(--modal-ink)'; } else { btn.style.background='var(--accent-2)'; btn.style.color='#052027'; } if(typeof opts.onClick==='function')btn.addEventListener('click',opts.onClick); if(opts.visibleIf)wrapper.dataset.visibleIf=opts.visibleIf; wrapper.appendChild(btn);out.el=wrapper;out.input=btn;return out; } if(type==='row'){ const container=document.createElement('div');container.className='modal-row'; if(opts.position)container.setAttribute('data-position',opts.position); (opts.children||[]).forEach(child=>{if(child instanceof Node)container.appendChild(child);else if(child.el)container.appendChild(child.el);}); out.el=container;return out; } out.el=wrapper;return out; } function parseOpts(rest){ const opts={}; rest.split('|').map(s=>s.trim()).filter(Boolean).forEach(p=>{ const [k,v]=p.split('=').map(s=>s.trim()); if(k&&v)opts[k]=v; else if(k)opts.value=k; }); return opts; } function splitOptions(s){ if(!s)return[]; s=s.trim(); const out=[];let cur='',inQuote=false,quoteChar=''; for(let i=0;i<s.length;i++){ const ch=s[i]; if((ch==='"'||ch==="'")&&!inQuote){inQuote=true;quoteChar=ch;continue;} if(ch===quoteChar&&inQuote){inQuote=false;quoteChar='';continue;} if(ch===','&&!inQuote){out.push(cur.trim());cur='';continue;} cur+=ch; } if(cur.trim()!=='')out.push(cur.trim()); return out; } function collectValues(state){ const values={};if(!state||!state.inputs)return values; for(const el of state.inputs){ if(!el||!el.dataset)continue; const key=el.dataset.modalKey||'';if(!key)continue; let val;if(el.type==='checkbox'||el.type==='radio') val=el.checked; else if(el.classList && el.classList.contains('custom-dropdown-trigger')) val=el.dataset.value||el.textContent; else val=el.value; values[key]=val; } return values; } function setupConditionals(state){ state.inputs.forEach(el=>{ if(el.classList&&el.classList.contains('custom-dropdown-trigger'))el.addEventListener('change',()=>updateVisibility(state)); });updateVisibility(state); } function updateVisibility(state){ const elements=bodyEl.querySelectorAll('[data-visible-if]'); elements.forEach(elem=>{ const cond=elem.dataset.visibleIf; const [depKey,op,val]=cond.split(/([==!=><]+)/).map(s=>s.trim()); const depEl=state.inputs.find(e=>e.dataset.modalKey===depKey); if(!depEl){elem.style.display='none';return;} const depVal=depEl.value||depEl.dataset.value||depEl.textContent; let show=false;switch(op){ case'==':show=depVal===val;break; case'!=':show=depVal!==val;break; default:show=true; } elem.style.display=show?'block':'none'; }); } function parseContentArray(contentArr,state){ const nodes=[]; for(const rawItem of (contentArr||[])){ if(!rawItem)continue; if(rawItem instanceof Node){nodes.push(rawItem);continue;} const item=rawItem.toString().trim(); const colon=item.indexOf(':'); if(colon===-1){continue;} const type=item.slice(0,colon).trim().toLowerCase(); const rest=item.slice(colon+1).trim(); const opts=parseOpts(rest); if(type==='row'){ const groups=[],re=/\[([^[]+)\]/g;let m; while((m=re.exec(rest))!==null)groups.push(m[1].trim()); const childNodes=[]; for(const g of groups){ const firstComma=g.indexOf(',');let gType='',payload=''; if(firstComma===-1){gType=g.trim().toLowerCase();payload='';} else{gType=g.slice(0,firstComma).trim().toLowerCase();payload=g.slice(firstComma+1).trim();} const gOpts=parseOpts(payload); let el; switch(gType){ case'message':el=createModalElement('message',{text:gOpts.value||gOpts.text||''});break; case'input':el=createModalElement('input',{key:sanitizeKey(gOpts.placeholder||'input'),inputType:gOpts.type||'text',placeholder:gOpts.placeholder||''});break; case'textarea':el=createModalElement('textarea',{key:sanitizeKey(gOpts.placeholder||'textarea'),placeholder:gOpts.placeholder||''});break; case'select':{ const optsList=splitOptions(gOpts.options||payload); const options=optsList.map(o=>{if(o.includes('|')){const [label,value]=o.split('|').map(s=>s.trim());return{label,value};}else{return{label:o,value:o};}}); el=createModalElement('select',{key:sanitizeKey(options[0]?.label||'select'),options}); break; } case'checkbox':el=createModalElement('checkbox',{key:sanitizeKey(gOpts.label||gOpts.value||'cb'),label:gOpts.label||gOpts.placeholder||gOpts.value});break; case'radio':el=createModalElement('radio',{key:sanitizeKey(gOpts.label||gOpts.value||'radio'),label:gOpts.label||gOpts.placeholder||gOpts.value});break; case'button':el=createModalElement('button',{value:gOpts.value||gOpts.label||'Button'});break; default:el=createModalElement(gType,gOpts);break; } if(el.input)state.inputs.push(el.input); childNodes.push(el); } const row=createModalElement('row',{children:childNodes,position:opts.position}); nodes.push(row.el);continue; } let el; switch(type){ case'message':el=createModalElement('message',{text:opts.value||opts.text||''});break; case'input':el=createModalElement('input',{key:sanitizeKey(opts.placeholder||'input'),inputType:opts.type||'text',placeholder:opts.placeholder||''});break; case'textarea':el=createModalElement('textarea',{key:sanitizeKey(opts.placeholder||'textarea'),placeholder:opts.placeholder||''});break; case'select':{ const optsList=splitOptions(opts.options||rest); const options=optsList.map(o=>{if(o.includes('|')){const [label,value]=o.split('|').map(s=>s.trim());return{label,value};}else{return{label:o,value:o};}}); el=createModalElement('select',{key:sanitizeKey(options[0]?.label||'select'),options}); break; } case'checkbox':el=createModalElement('checkbox',{key:sanitizeKey(opts.label||opts.value||'cb'),label:opts.label||opts.placeholder||opts.value});break; case'radio':el=createModalElement('radio',{key:sanitizeKey(opts.label||opts.value||'radio'),label:opts.label||opts.placeholder||opts.value});break; case'button':el=createModalElement('button',{value:opts.value||opts.label||'Button'});break; default:el=createModalElement(type,opts);break; } if(el.input)state.inputs.push(el.input); nodes.push(el.el); } return nodes; } window.closeModal = function(result = null){ if(resolver){try{resolver(result);}catch(e){}} resolver=null; if(backdrop)backdrop.classList.remove('active'); if(dialog)dialog.removeAttribute('aria-labelledby'); bodyEl.innerHTML='';footerEl.innerHTML='';titleEl.textContent=''; if(openState&&openState.cleanupHandlers){ for(const fn of openState.cleanupHandlers){try{fn();}catch(_){}}} trapFocus(false);openState=null; }; window.showModal = function showModal(options = {}){ ensureModal(); if(!options.content){ const content=[]; if(options.message)content.push(`message: ${options.message}`); if(options.input){if(Array.isArray(options.input))for(const i of options.input)content.push(`input: ${i}`);else content.push(`input: ${options.input}`);} Object.keys(options).forEach(k=>{if(/^message\\d+$/.test(k))content.push(`message: ${options[k]}`);if(/^input\\d+$/.test(k))content.push(`input: ${options[k]}`);}); if(content.length)options.content=content; } return new Promise((resolve)=>{ resolver=resolve; openState={inputs:[],keys:new Set(),cleanupHandlers:[]}; titleEl.textContent=options.title||''; dialog.setAttribute('aria-labelledby',titleEl.id); bodyEl.innerHTML='';footerEl.innerHTML=''; const contentArr=Array.isArray(options.content)?options.content:[];const nodes=parseContentArray(contentArr,openState); nodes.forEach(n=>bodyEl.appendChild(n)); setupConditionals(openState); backdrop.classList.add('active'); setTimeout(()=>{ bodyEl.querySelectorAll('.modal-row').forEach(row=>{ const buttons=row.querySelectorAll('button'); if(buttons.length>1){ let maxBtnWidth=0;buttons.forEach(b=>{maxBtnWidth=Math.max(maxBtnWidth,b.offsetWidth);}); buttons.forEach(b=>{b.style.width=`${maxBtnWidth}px`;}); } }); },30); const actions=[]; if(Array.isArray(options.button))actions.push(...options.button); else if(typeof options.button==='string')actions.push(...options.button.split(',').map(s=>s.trim()).filter(Boolean)); else if(Array.isArray(options.buttons))actions.push(...options.buttons); if(actions.length===0)actions.push('OK'); for(const label of actions){ const btn=document.createElement('button'); btn.className='modal-btn';btn.type='button';btn.textContent=label; const lowerLabel=label.toLowerCase(); if(lowerLabel.includes('cancel')||lowerLabel.includes('close')){ btn.style.background='#373737'; btn.style.color='var(--modal-ink)'; } else { btn.style.background='var(--accent-2)'; btn.style.color='#052027'; } btn.addEventListener('click',()=>{ const values=collectValues(openState);closeModal({action:label,values}); }); footerEl.appendChild(btn); } trapFocus(true); setTimeout(()=>{ const first=bodyEl.querySelector('[data-modal-key], input, textarea, select, button'); if(first&&first.focus)first.focus(); },30); }); }; window.setupModalSystem = function setupModalSystem(){ensureModal();}; window.setupModalSystem(); })();
window.handleFormat=function(t){const r=preserveSelection(async function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,v=noteTextarea.value;if(s===e){showNotification(`Please select text to ${t}!`);return}let errorMsg="";while(1){const a=[];if(errorMsg)a.push("message:"+errorMsg);let opts="";if(t==="italic")opts="Choose Format, MarkDown (*text*)|1, MarkUp (<i>text</i>)|2";else if(t==="underline")opts="Choose Format, MarkDown (__text__)|1, MarkUp (<u>text</u>)|2";else if(t==="bold")opts="Choose Format, MarkDown (**text**)|1, MarkUp (<b>text</b>)|2";else if(t==="code")opts="Choose Format, MarkDown (```)|1, MarkUp (<code>)|2";a.push("select: "+opts);const n=await showModal({title:`${t[0].toUpperCase()+t.slice(1)} Text`,content:a,button:"Cancel, OK"});if(!n||!n.action||n.action==="Cancel")return;const c=String(n.values.choose_format).trim();if(c===""||c==="Choose Format"){errorMsg="Please select a format!";continue}const sel=v.slice(s,e);let f="";if(t==="italic")f=c==="2"?`<i>${sel}</i>`:`*${sel}*`;else if(t==="underline")f=c==="2"?`<u>${sel}</u>`:`__${sel}__`;else if(t==="bold")f=c==="2"?`<b>${sel}</b>`:`**${sel}**`;else if(t==="code")f=c==="2"?`<code>${sel}</code>`:`\`\`\`\n${sel}\n\`\`\``;noteTextarea.value=v.slice(0,s)+f+v.slice(e);updateNoteMetadata();showNotification(`Text ${t} applied!`);break}});return typeof r==="function"?r():r};window.handleBulletList=function(){const r=preserveSelection(async function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,v=noteTextarea.value;if(s===e){showNotification("Please select text for bullet list!");return}let errorMsg="";while(1){const a=[];if(errorMsg)a.push("message:"+errorMsg);a.push("select: Choose Format, MarkDown (- item)|1, MarkUp (<ul><li>)|2");const n=await showModal({title:"Bullet List",content:a,button:"Cancel, OK"});if(!n||!n.action||n.action==="Cancel")return;const c=String(n.values.choose_format).trim();if(c===""||c==="Choose Format"){errorMsg="Please select a format!";continue}const sel=v.slice(s,e),lines=sel.split(/\r?\n/);let f;if(c==="2"){f="<ul>\n"+lines.map(t=>"<li>"+t+"</li>").join("\n")+"\n</ul>"}else{f=lines.map(t=>"- "+t).join("\n")}noteTextarea.value=v.slice(0,s)+f+v.slice(e);updateNoteMetadata();showNotification("Bullet list applied!");break}});return typeof r==="function"?r():r};window.handleNumberedList=function(){const r=preserveSelection(async function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,v=noteTextarea.value;if(s===e){showNotification("Please select text for numbered list!");return}let errorMsg="";while(1){const a=[];if(errorMsg)a.push("message:"+errorMsg);a.push("select: Choose Format, MarkDown (1. item)|1, MarkUp (<ol><li>)|2");const n=await showModal({title:"Numbered List",content:a,button:"Cancel, OK"});if(!n||!n.action||n.action==="Cancel")return;const c=String(n.values.choose_format).trim();if(c===""||c==="Choose Format"){errorMsg="Please select a format!";continue}const sel=v.slice(s,e),lines=sel.split(/\r?\n/);let f;if(c==="2"){f="<ol>\n"+lines.map(t=>"<li>"+t+"</li>").join("\n")+"\n</ol>"}else{f=lines.map((t,i)=>(i+1)+". "+t).join("\n")}noteTextarea.value=v.slice(0,s)+f+v.slice(e);updateNoteMetadata();showNotification("Numbered list applied!");break}});return typeof r==="function"?r():r};window.handleInsertLink=function(){const r=preserveSelection(async function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,v=noteTextarea.value;const n=await showModal({title:"Insert Link",content:["input: placeholder=Enter URL","input: placeholder=Enter Link Text","Select: Choose Format, Markdown, MarkUp"],button:"Cancel, OK"});if(!n||!n.action||n.action==="Cancel")return;const url=String(n.values.enter_url||"").trim(),text=String(n.values.enter_link_text||"").trim(),fmt=String(n.values.choose_format||"").trim();if(!url||!text||!fmt)return;const f=fmt==="MarkUp"?`<a href="${url}">${text}</a>`:`[${text}](${url})`;noteTextarea.value=v.slice(0,s)+f+v.slice(e);updateNoteMetadata();showNotification("Link inserted!")});return typeof r==="function"?r():r};window.handleInsertImage=function(){const r=preserveSelection(async function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,v=noteTextarea.value;const n=await showModal({title:"Insert Image",content:["input: placeholder=Enter Image URL","Select: Choose Format, Markdown, MarkUp"],button:"Cancel, OK"});if(!n||!n.action||n.action==="Cancel")return;const url=String(n.values.enter_image_url||"").trim(),fmt=String(n.values.choose_format||"").trim();if(!url||!fmt)return;const f=fmt==="MarkUp"?`<img src="${url}" alt='Image' />`:`![Image](${url})`;noteTextarea.value=s===e?v+f:v.slice(0,s)+f+v.slice(e);updateNoteMetadata();showNotification("Image inserted!")});return typeof r==="function"?r():r};window.handleUppercase=function(){const r=preserveSelection(function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,v=noteTextarea.value;if(!v)return;const f=s===e?v.toUpperCase():v.slice(0,s)+v.slice(s,e).toUpperCase()+v.slice(e);noteTextarea.value=f;updateNoteMetadata();showNotification("Converted to uppercase!")});return"function"==typeof r?r():r};window.handleLowercase=function(){const r=preserveSelection(function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,v=noteTextarea.value;if(!v)return;const f=s===e?v.toLowerCase():v.slice(0,s)+v.slice(s,e).toLowerCase()+v.slice(e);noteTextarea.value=f;updateNoteMetadata();showNotification("Converted to lowercase!")});return"function"==typeof r?r():r};window.handleAlignLeft=function(){if(!noteTextarea)return;noteTextarea.style.textAlign="left";showNotification("Text aligned left!")};window.handleAlignCenter=function(){if(!noteTextarea)return;noteTextarea.style.textAlign="center";showNotification("Text aligned center!")};window.handleAlignRight=function(){if(!noteTextarea)return;noteTextarea.style.textAlign="right";showNotification("Text aligned right!")};window.increaseIndentation=function(){const r=preserveSelection(async function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd;if(s===e){showNotification("Please select text to indent!");return}const t=noteTextarea.value.slice(s,e),i='\t'+t.replace(/\n/g,'\n\t');noteTextarea.value=noteTextarea.value.slice(0,s)+i+noteTextarea.value.slice(e);updateNoteMetadata();showNotification("Text indented!")});return"function"==typeof r?r():r};window.decreaseIndentation=function(){const r=preserveSelection(async function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd;if(s===e){showNotification("Please select text to un-indent!");return}const t=noteTextarea.value.slice(s,e).split('\n'),i=t.map(e=>e.startsWith('\t')?e.slice(1):e.startsWith('    ')?e.slice(4):e).join('\n');noteTextarea.value=noteTextarea.value.slice(0,s)+i+noteTextarea.value.slice(e);updateNoteMetadata();showNotification("Indentation removed!")});return"function"==typeof r?r():r};window.handleSelectAll=function(){if(!currentNote||!noteTextarea)return;noteTextarea.setSelectionRange(0,noteTextarea.value.length);noteTextarea.blur();showNotification("All text selected!")};window.handleCopyNote=function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,t=s===e?noteTextarea.value:noteTextarea.value.slice(s,e);navigator.clipboard.writeText(t).then(()=>showNotification("Copied to clipboard!")).catch(()=>showNotification("Copy failed (clipboard not available)."))};window.handleCutNote=function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,t=s===e?noteTextarea.value:noteTextarea.value.slice(s,e);navigator.clipboard.writeText(t).then(()=>{noteTextarea.value=s===e?"":noteTextarea.value.slice(0,s)+noteTextarea.value.slice(e);noteTextarea.selectionStart=noteTextarea.selectionEnd=s;updateNoteMetadata();showNotification("Cut to clipboard!")}).catch(()=>showNotification("Cut failed (clipboard not available)."))};window.handleClearNote=function(){const r=preserveSelection(async function(){if(!currentNote||!noteTextarea)return;const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd,v=noteTextarea.value;if(s===e){noteTextarea.value="";}else{noteTextarea.value=v.slice(0,s)+v.slice(e);}updateNoteMetadata();showNotification("Note cleared!")});return"function"==typeof r?r():r};window.handlePasteNote=function(){const r=async function(){if(!currentNote||!noteTextarea)return;if(!navigator.clipboard||!navigator.permissions){showNotification("Paste not supported in this browser.");return}try{const perm=await navigator.permissions.query({name:"clipboard-read"});if(perm.state==="denied"){showNotification("Clipboard access denied. Please allow it in your browser settings.");return}const clip=await navigator.clipboard.readText();const s=noteTextarea.selectionStart,e=noteTextarea.selectionEnd;noteTextarea.value=noteTextarea.value.slice(0,s)+clip+noteTextarea.value.slice(e);const n=s+clip.length;noteTextarea.selectionStart=noteTextarea.selectionEnd=n;updateNoteMetadata();showNotification("Pasted from clipboard!")}catch{showNotification("Paste failed (permission denied or empty clipboard).")}};r()};
